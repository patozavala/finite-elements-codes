import numpy as np

def q1_incompatible_shape_function(xeset,xi):
    xi1=xi[0]
    n=xi[1]
    N1hat= 1./4.* (1.-xi1)*(1.-n)
    N2hat= 1./4.* (1.+ xi1)*(1.-n)
    N3hat= 1./4.* (1.-xi1)*(1.+n)
    N4hat= 1./4.* (1.-xi1)*(1.+n)
    P1hat= 1. - xi1**2.
    P2hat= 1. - n**2.
    Nhat = np.vstack((N1hat,N2hat,N3hat,N4hat))
    Phat= np.array([[P1hat, 0., P2hat, 0.],[0., P1hat, 0., P2hat]])
#    DPhat=np.array([[-2.*xi1, 0],[0,-2.*n]])
    Bhat=np.array([[-1./4.*(1-n), 1./4.*(1-n), 1./4.*(1.+n), -1./4.*(1.+n)],[-1./4.*(1-xi1), -1./4.*(1.+xi1), 1./4.*(1.+xi1), 1./4.*(1-xi1)]])  
    J=np.dot(xeset,Bhat.T)
    detJ=abs(np.linalg.det(J))
    N=Nhat
    P=Phat
#    para construir G
    DPhat=np.array([[-2.*xi1,0.],[0.,2.*n]])
    Bhat0=np.array([[-0.25,  0.25,  0.25, -0.25],
       [-0.25, -0.25,  0.25,  0.25]])
    J0=np.dot(xeset,Bhat0.T)
    detJ0=abs(np.linalg.det(J0))
    G=detJ0/detJ*np.dot(np.linalg.inv(J0.T),np.dot(np.linalg.inv(J0.T),DPhat))*detJ
#    G1=2./detJ0*np.array([[-xi1*J0[1,1],0.],[0.,xi1*J0[0,1]],[xi1*J0[0,1],xi1*J0[1,1]]])
#    G2=2./detJ0*n*np.array([[-J0[1,0],0.],[0.,-J0[0,0]],[-J0[0,0], J0[1,0]]])    
#    G=np.hstack((G1,G2))
    DN=np.dot(np.linalg.inv(J.T),Bhat)
    xhat=np.dot(xeset,N) 
    return xhat, N, DN, detJ, P, G, detJ0, J0
